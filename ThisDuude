public class ThisDuude implements Strategy 
{ 
    private Card[] hand;
    private int playerSeat;
    private int phandCategory;
    private int turn;
    private int numRaises;
    private TableView table;
    private int opponentsPower;
    private int[] seatPowers;
    private ArrayList<int> bluffResults;
    public void deal(int seat, int handCategory, Card[] h, TableView tableView)
    {
        hand = h;
        playerSeat = seat;
        phandCategory = handCategory;
        turn = 1;
        numRaises = 0;
        table = tableView;
        opponentsPower= 0;
        seatPowers = new int[tableView.getSize()];
        seatPowers[seat] = 0;
        bluffResults = new ArrayList<int>();
    }

    // called when it's this player's turn during betting 
    // returns FOLD, CALL, or RAISE 
    public int act() 
    { 
        //have betting cases for 4-5 players and 2-3 players. current is 2-3 players
        if (table.getSize() <= 3)
        {
            if(table.getCall() >2|| table.getPot() == 9) 
            {
                if(PokerUtil.evaluateHand(hand) >= 3)
                {
                    return RAISE;
                }

                if(PokerUtil.evaluateHand(hand) >= 2)//2 pairs or higher

                    return CALL;

                else
                {

                    return FOLD; //nothing in hand

                }
            }
            if(turn == 1) //first round of betting
            {
                if(PokerUtil.evaluateHand(hand) >= 2)//2 pairs or higher
                {

                    return RAISE;
                }
                else if (PokerUtil.evaluateHand(hand) == 1) //1 pair
                {
                    if (rankOfPair(hand) < 6) 
                    {
                        if (table.getCall() > 1) //2
                        {

                            return FOLD;
                        }

                        return CALL;
                    }

                    if (table.getCall() > 0) 
                    {

                        return CALL;
                    }

                    return RAISE;
                }
                else if(PokerUtil.evaluateHand(hand) > 0 || isClose(hand)[0] == 1 )//1 pair or chance at straight/flush or high card
                {
                    if (table.getCall() > 1)
                        return FOLD;

                    return CALL;
                }
                else
                {

                    return FOLD; //nothing in hand

                }

            } 
            else //2nd round of betting
            {

                if(PokerUtil.evaluateHand(hand) >= 5)
                {
                    if (getOpponentsPower() == 4)
                        return CALL;

                    return RAISE;
                }
                else if (PokerUtil.evaluateHand(hand) >= 2)
                {
                    if (getOpponentsPower() >= 3)
                        return CALL;

                    return RAISE;
                }
                else if (PokerUtil.evaluateHand(hand) == 1) //1 pair
                {
                    if (getOpponentsPower() >= 2)
                        return FOLD;
                    if (rankOfPair(hand) < 12) 
                    {
                        if (table.getCall() > 1)
                        {

                            return FOLD;
                        }

                        return CALL;
                    }
                    if (table.getCall() > 0) 
                    {

                        return CALL;
                    }

                    return RAISE;
                }
                else if(PokerUtil.evaluateHand(hand) > 0   )//1 pair  or high card(face cards only)
                {

                    if (table.getCall() > 1)
                        return FOLD;
                    return CALL;
                }
                else
                {

                    return FOLD; //nothing in hand

                }

            }
        }
        else //table.size() is greater than 3
        {

            
            if(turn == 1) //first round of betting
            {
                if(PokerUtil.evaluateHand(hand) >= 2)//2 pairs or higher
                {

                    return RAISE;
                }
                else if (PokerUtil.evaluateHand(hand) == 1) //1 pair
                {
                    

                    if (table.getCall() > 0) 
                    {

                        return CALL;
                    }

                    return RAISE;
                }
                else if(PokerUtil.evaluateHand(hand) > 0 || isClose(hand)[0] == 1 )//1 pair or chance at straight/flush or high card
                {
                    if (table.getCall() > 2)
                        return FOLD;

                    return CALL;
                }
                else
                {

                    return FOLD; //nothing in hand

                }

            } 
            else //2nd round of betting
            {

                if(PokerUtil.evaluateHand(hand) >= 5)
                {
                    if (getOpponentsPower() == 4)
                        return CALL;

                    return RAISE;
                }
                else if (PokerUtil.evaluateHand(hand) >= 2)
                {
                    if (getOpponentsPower() >= 3)
                        return CALL;

                    return RAISE;
                }
                else if (PokerUtil.evaluateHand(hand) == 1) //1 pair
                {
                    if (getOpponentsPower() >= 2)
                        return FOLD;
                        if (getOpponentsPower() < 1) 
                    {
                        
                        return CALL;
                    }
                    if (getOpponentsPower() == 1) //they have 1 pair
                    {
                        rankOfPair(hand);
                        
                            if (table.getCall() > 1)
                            {

                                return FOLD;
                            }

                            return CALL;
                        
                        
                        
                    }
                    return CALL;
                }
                
                
                else
                {

                    return FOLD; //nothing in hand

                }

            }
        }
    }
    //returns the rank of the pair
    //pre condition: hand has a single pair
    public static int rankOfPair(Card[] theHand)
    {
        for (int i = 1; i < theHand.length; i++) //sorts the hand
        {
            for (int j = i; j > 0; j--)
                if (theHand[j].getRank() > theHand[j - 1].getRank())
                {
                    Card savedCard = theHand[j];
                    theHand[j] = theHand[j - 1];
                    theHand[j - 1] = savedCard;
                }
        }

        for (int i = 0; i < theHand.length; i++)
        {
            if (theHand[i].getRank() == theHand[i+1].getRank())
            {

                return theHand[i].getRank();
            }
        }

        return -1; //wont happen
    }

    public static int[] isClose(Card[] theHand) //finds out if it is close to a straight/flush
    {
        int[] answer = new int[2]; //0 in first value means not close. 1 in first value means 4 fit the characteristics of a straight/flush. Second value means which card to exchange.
        answer[0] = 0;
        answer[1] = 5; //5 is simply a placeholder for not applicable when it is not close
        for (int i = 1; i < theHand.length; i++) //sorts the hand
        {
            for (int j = i; j > 0; j--)
                if (theHand[j].getRank() > theHand[j - 1].getRank())
                {
                    Card savedCard = theHand[j];
                    theHand[j] = theHand[j - 1];
                    theHand[j - 1] = savedCard;
                }
        }

        //check if close to flush, since it is considered better than a straight at the showdown
        int numSpade = 0;
        int numClub = 0;
        int numHeart = 0;
        int numDiamond = 0;
        for (int x = 0; x< theHand.length; x++)
        {
            if (theHand[x].getSuit() == 0)
                numSpade++;
            if (theHand[x].getSuit() == 1)
                numClub++;
            if (theHand[x].getSuit() == 2)
                numHeart++;
            if (theHand[x].getSuit() == 3)
                numDiamond++;
        }
        if(numSpade == 4)
        {
            for (int x = 0; x< theHand.length; x++)
            {
                if (theHand[x].getSuit() != 0)
                {
                    answer[0] = 1;
                    answer[1] = x;
                    return answer;
                }
            }
        }
        if(numClub == 4)
        {
            for (int x = 0; x< theHand.length; x++)
            {
                if (theHand[x].getSuit() != 1)
                {
                    answer[0] = 1;
                    answer[1] = x;
                    return answer;
                }
            }
        }
        if(numHeart == 4)
        {
            for (int x = 0; x<theHand.length; x++)
            {
                if (theHand[x].getSuit() != 2)
                {
                    answer[0] = 1;
                    answer[1] = x;
                    return answer;
                }
            }
        }
        if(numDiamond == 4)
        {
            for (int x = 0; x<theHand.length; x++)
            {
                if (theHand[x].getSuit() != 3)
                {
                    answer[0] = 1;
                    answer[1] = x;
                    return answer;
                }
            }
        }

        //now check if close to straight, looking for higher rank straights first
        if (theHand[4].getRank() - theHand[1].getRank() == 4)
        {
            answer[0] = 1;
            answer[1] = 0;
            return answer;
        }
        if (theHand[3].getRank() - theHand[0].getRank() == 4)
        {
            answer[0] = 1;
            answer[1] = 4;
            return answer;
        }

        if (theHand[4].getRank() == 14) //ace at the end
        {
            Card temp = theHand[4];
            for (int y = theHand.length -1; y > 0; y--)
            {
                theHand[y] = theHand[y-1];
            }
            theHand[0] = temp; //puts ace at the front
            return isClose(theHand); //runs same method with ace acting as value 1
        }
        return answer;

    }

    public static int[] highCard(Card[] h)//returns an array, with the first value being the rank, the second value being its location in your hand, and the third being the total above 10
    {
        int[] rin = new int[3];
        int high = 0;
        int index = 0;
        int numAboveTen = 0;
        for(int x = 0; x < h.length; x ++)
        {
            if(h[x].getRank()>10)
            {
                numAboveTen ++;
            }
            if(h[x].getRank() > high)
            {
                high = h[x].getRank();
                index = x;

            }

        }
        rin[0] = high;
        rin[1] = index;
        rin[2] = numAboveTen;
        return rin;
    }

    //looks for combos(e.g. pair, 3 of a kind, 2 pair, 4 of a kind)
    //returns array of booleans of the cards that should be removed
    public boolean[] findCombos(Card[] c)
    {

        for (int i = 1; i < c.length; i++) //sorts the hand
        {
            for (int j = i; j > 0; j--)
                if (c[j].getRank() > c[j - 1].getRank())
                {
                    Card savedCard = c[j];
                    c[j] = c[j - 1];
                    c[j - 1] = savedCard;
                }
        }

        boolean[] spots = new boolean[5];

        //looks for 4 of a kind, tries to get a high card for the 5th
        if(PokerUtil.evaluateHand(c) == 7)
        {
            if(c[0] != c[1])
            {
                if(c[0].getRank() <10) //if the non 4 of a kind is less than 10, switch it
                {
                    spots[0] = true;
                }
                return spots;
            }
            else
            {
                if(c[0].getRank() <10)
                {
                    spots[4] = true;
                }
                return spots;
            }
        }
        if(PokerUtil.evaluateHand(c) == 3) //three of a kind
        {
            if(c[0] != c[1]) 
            {
                if(c[1] != c[2]) 
                {
                    spots[0] = true; //switch out the first two
                    spots[1] = true;
                    return spots;
                }
                spots[0]= true; //switch out first and last
                spots[4] = true;
                return spots;
            }
            spots[3] = true; //swtich out the last two
            spots[4] = true;
            return spots;
        }
        else if(PokerUtil.evaluateHand(c) == 2) //two pairs
        {
            if(c[0].getRank() != c[1].getRank())
            {
                spots[0] = true;
                return spots;

            }
            if(c[2].getRank() != c[3].getRank())
            {
                spots[2] = true;
                return spots;
            }
            else
            {
                spots[4] = true;
                return spots;
            }
        } 
        else if (PokerUtil.evaluateHand(c) == 1) //1 pair
        {
            if(c[0].getRank() == c[1].getRank())
            {
                spots[2] = true;
                spots[3] = true;
                spots[4] = true;
                return spots;
            }
            else if(c[1].getRank() == c[2].getRank())
            {
                spots[0] = true;
                spots[3] = true;
                spots[4] = true;
                return spots;
            }
            else if(c[2].getRank() == c[3].getRank())
            {
                spots[0] = true;
                spots[1] = true;
                spots[4] = true;
                return spots;
            }
            else if(c[3].getRank() == c[4].getRank())
            {
                spots[0] = true;
                spots[1] = true;
                spots[2] = true;
                return spots;
            }

        }
        return spots;
    }

    // returns which cards to exchange; 
    // for example, {true, false, true, false, false} means discard cards at index 0 and 2 
    //have the basic framework, need to figure out what to exchange in different scenarios
    public boolean[] exchange()  
    { 
        boolean[] exchange = new boolean[5];

        if (PokerUtil.evaluateHand(hand) == 8) //if a straight flush, don't switch anything
            return exchange;

        if (PokerUtil.evaluateHand(hand) == 7) //if a 4 of a kind, use findCombos to find what to replace
            return findCombos(hand);

        if (PokerUtil.evaluateHand(hand) == 6) //if a full house, don't switch anything
            return exchange;

        int[] x = isClose(hand); //now see if it is close to a flush or straight
        if(x[0] == 1) //it is close
        {

            exchange[x[1]] = true; 
            return exchange;
        }

        if (PokerUtil.evaluateHand(hand) == 3 || PokerUtil.evaluateHand(hand) == 2 || PokerUtil.evaluateHand(hand) == 1) //if 3 of a kind, 2 pairs, or 1 pair, return findCombos of the hand
            return findCombos(hand);

        if (PokerUtil.evaluateHand(hand) == 0) //if there is a high card, exchange everything but that high hard
        {

            int[] highCardArray = highCard(hand);
            int u = highCardArray[1];
            for (int e = 0; e < 5; e++)
            {
                if (e != u)
                    exchange[e] = true;
            }
            return exchange; 
        }

        return exchange;
    } 

    public void exchanged(int handCategory, Card[] hand)
    {

    }

    public void roundEnded()
    {
    }

    public int getOpponentsPower()
    {
        int highest = -2;
        for (int x = 0; x < seatPowers.length; x++)
        {
            if (x != playerSeat)
            {
                if (seatPowers[x] > highest)
                    highest = seatPowers[x];
            }
        }
        return highest;
    }
   //written to protect against a potentially bluffing bot during a 1v1 scenario.
   //uses the bluff results list to analyze outcomes of an opponent's bluff, namely when 0 cards are exchanged and the hand has minimal power. 
   public void protectBluff(int seat) 
    {
    int wins = 0;
    int losses = 0;
    for(int x = 0; x < bluffResults.size(); x ++)
    {
    if(bluffResults.get(x) == 1)
    wins++;
    else
    losses++;
    
    }
    if(wins<losses)
    {
    
    
    }
    
    
    
    }


    public void playerExchanged(int seat, int numCardsExchanged)
    {
        if (turn == 1)
            turn = 2;

        if (seat != playerSeat)
        {
            if (numCardsExchanged == 0)
            {
                seatPowers[seat] = 4;
            }
            if (numCardsExchanged == 1)
            {
                seatPowers[seat] = 2;
            }
            if (numCardsExchanged == 2)
            {
                seatPowers[seat] = 2;
            }
            if (numCardsExchanged == 3)
            {
                seatPowers[seat] = 1;
            }
            if (numCardsExchanged == 4)
            {
                seatPowers[seat] = 0;
            }
            if (numCardsExchanged == 5)
            {
                seatPowers[seat] = 0;
            }
        }
    }

    public void playerActed(int seat, int action)
    {
    }
} 
