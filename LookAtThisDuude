public class LookAtThisDuude implements Strategy 
{ 
    private Card[] hand;
    private int playerSeat;
    private int phandCategory;
    private int turn;
    private int numRaises;
    private tableView table;
    public void deal(int seat, int handCategory, Card[] h, TableView tableView)
    {
        hand = h;
        playerSeat = seat;
        phandCategory = handCategory;
        turn = 1;
        numRaises = 0;
        table = tableview;
    }

    // called when it's this player's turn during betting 
    // returns FOLD, CALL, or RAISE 
    public int act() 
    { 
    if(table.getCall()==4|| table.getPot() == 9)
{

    if(HandEvaluator.evaluateHand(hand) >= 2)//2 pairs or higher
       
            return CALL;
   
   else
        {

            return FOLD; //nothing in hand

        }
}
  if(turn == 1)
  {
  if(HandEvaluator.evaluateHand(hand) >= 2)//2 pairs or higher
        {
            return RAISE;

        }
        else if(HandEvaluator.evaluateHand(hand) > 0 || isClose(hand)[0] == 1 || highCard(hand)[0] >= 10  )//1 pair or chance at straight/flush or high card
        {
            return CALL;
        }
        else
        {

            return FOLD; //nothing in hand

        }
  turn ++;
  
  } 
  else
  {
  
  if(HandEvaluator.evaluateHand(hand) >= 2)//2 pairs or higher
        {
            return RAISE;

        }
        else if(HandEvaluator.evaluateHand(hand) > 0 ||  highCard(hand)[0] > 10  )//1 pair  or high card(face cards only)
        {
            return CALL;
        }
        else
        {

            return FOLD; //nothing in hand

        }
  
  }
  }


    public static int[] isClose(Card[] theHand) //finds out if it is close to a straight/flush
    {
        int[] answer = new int[2]; //0 in first value means not close. 1 in first value means 4 fit the characteristics of a straight/flush. Second value means which card to exchange.
        answer[0] = 0;
        answer[1] = 5; //5 is simply a placeholder for not applicable when it is not close
        for (int i = 1; i < theHand.length; i++) //sorts the hand
        {
            for (int j = i; j > 0; j--)
                if (theHand[j].getRank() > theHand[j - 1].getRank())
                {
                    Card savedCard = theHand[j];
                    theHand[j] = theHand[j - 1];
                    theHand[j - 1] = savedCard;
                }
        }

        //check if close to flush, since it is considered better than a straight at the showdown
        int numSpade = 0;
        int numClub = 0;
        int numHeart = 0;
        int numDiamond = 0;
        for (int x = 0; x< theHand.length; x++)
        {
            if (theHand[x].getSuit() == 0)
                numSpade++;
            if (theHand[x].getSuit() == 1)
                numClub++;
            if (theHand[x].getSuit() == 2)
                numHeart++;
            if (theHand[x].getSuit() == 3)
                numDiamond++;
        }
        if(numSpade == 4)
        {
            for (int x = 0; x< theHand.length; x++)
            {
                if (theHand[x].getSuit() != 0)
                {
                    answer[0] = 1;
                    answer[1] = x;
                    return answer;
                }
            }
        }
        if(numClub == 4)
        {
            for (int x = 0; x< theHand.length; x++)
            {
                if (theHand[x].getSuit() != 1)
                {
                    answer[0] = 1;
                    answer[1] = x;
                    return answer;
                }
            }
        }
        if(numHeart == 4)
        {
            for (int x = 0; x<theHand.length; x++)
            {
                if (theHand[x].getSuit() != 2)
                {
                    answer[0] = 1;
                    answer[1] = x;
                    return answer;
                }
            }
        }
        if(numDiamond == 4)
        {
            for (int x = 0; x<theHand.length; x++)
            {
                if (theHand[x].getSuit() != 3)
                {
                    answer[0] = 1;
                    answer[1] = x;
                    return answer;
                }
            }
        }

  
        //now check if close to straight, looking for higher rank straights first
        if (theHand[4].getRank() - theHand[1].getRank() == 4)
        {
            answer[0] = 1;
            answer[1] = 0;
            return answer;
        }
        if (theHand[3].getRank() - theHand[0].getRank() == 4)
        {
            answer[0] = 1;
            answer[1] = 4;
            return answer;
        }

        if (theHand[4].getRank() == 14) //ace at the end
        {
            Card temp = theHand[4];
            for (int y = theHand.length -1; y > 0; y--)
            {
                theHand[y] = theHand[y-1];
            }
            theHand[0] = temp; //puts ace at the front
            return isClose(theHand); //runs same method with ace acting as value 1
        }
        return answer;

    }

    public static int[] highCard(int[] h)//returns an array, with the first value being the rank, the second value being its location in your hand, and the third being the total above 10
    {
        int[] rin = new int[3];
        int high = 0;
        int index = 0;
        int numAboveTen = 0;
        for(int x = 0; x < h.length; x ++)
        {
            if(h[x].getRank()>10)
            {
                numAboveTen ++;
            }
            if(h[x].getRank() > high)
            {
                high = h[x].getRank();
                index = x;

            }

        }
        rin[0] = high;
        rin[1] = index;
        rin[2] = numAboveTen;
        return rin;
    }
    
//looks for combos(e.g. pair, 3 of a kind, 2 pair, 4 of a kind)    
public boolean[] findCombos(card[] c)
{
boolean[] spots = new boolean[5];

//looks for 4 of a kind, tries to get a high card
if(evaluateHand(c) == 7)
{
if(c[0] != c[1])
{
if(c[0].getRank() <10)
{
spots[0] = true;
}
}
else
{
if(c[0].getRank() <10)
{
spots[4] = true;
}

return spots;
}
else if(evaluateHand(c) == 3)
{
if(c[0] != c[1])
{
if(c[1] != c[2])
{
spots[0] = true;
spots[1] = true;
return spots;
}
spots[0]= true;
spots[4] = true;
return spots;
}
spots[3] = true;
spots[4] = true;
return spots;
}

}

}



    // returns which cards to exchange; 
    // for example, {true, false, true, false, false} means discard cards at index 0 and 2 
    //have the basic framework, need to figure out what to exchange in different scenarios
    public boolean[] exchange()  
    { 
        boolean[] exchange = new boolean[5]; 
       int[] x = isClose(hand);
       if(x[1] < 5);
      exchange[x[1]] = true;
      else if (handEvaluator.evaluateHand() == 1)
      {
      
     if(hand[0].getRank().equals( hand[1].getRank()))
     {
     exchange[2] = true;
     exchange[3] = true;
     exchange[4] = true;
     }
      
      }
      else if(handEvaluator.evaluateHand() == 2)
      {
      
      
      
      }
      else if(handEvaluator.evaluateHand() == 3)
      {}
       return exchange;
       
    } 

    public void exchanged(int handCategory, Card[] hand)
    {
    }

    public void roundEnded()
    {
    }
} 
